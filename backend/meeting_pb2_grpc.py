# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import meeting_pb2 as meeting__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in meeting_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MeetingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveImportance = channel.unary_unary(
                '/meeting.MeetingService/SaveImportance',
                request_serializer=meeting__pb2.SaveImportanceRequest.SerializeToString,
                response_deserializer=meeting__pb2.SaveImportanceResponse.FromString,
                _registered_method=True)
        self.TranscribeAndSummarize = channel.unary_unary(
                '/meeting.MeetingService/TranscribeAndSummarize',
                request_serializer=meeting__pb2.TranscribeAndSummarizeRequest.SerializeToString,
                response_deserializer=meeting__pb2.TranscribeAndSummarizeResponse.FromString,
                _registered_method=True)
        self.SaveMetadata = channel.unary_unary(
                '/meeting.MeetingService/SaveMetadata',
                request_serializer=meeting__pb2.SaveMetadataRequest.SerializeToString,
                response_deserializer=meeting__pb2.SaveMetadataResponse.FromString,
                _registered_method=True)
        self.EditMetadata = channel.unary_unary(
                '/meeting.MeetingService/EditMetadata',
                request_serializer=meeting__pb2.EditMetadataRequest.SerializeToString,
                response_deserializer=meeting__pb2.EditMetadataResponse.FromString,
                _registered_method=True)
        self.DeleteMetadata = channel.unary_unary(
                '/meeting.MeetingService/DeleteMetadata',
                request_serializer=meeting__pb2.DeleteMetadataRequest.SerializeToString,
                response_deserializer=meeting__pb2.DeleteMetadataResponse.FromString,
                _registered_method=True)
        self.ProcessMeeting = channel.stream_stream(
                '/meeting.MeetingService/ProcessMeeting',
                request_serializer=meeting__pb2.MeetingStreamRequest.SerializeToString,
                response_deserializer=meeting__pb2.MeetingStreamResponse.FromString,
                _registered_method=True)


class MeetingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SaveImportance(self, request, context):
        """Keep existing unary methods for now as per instruction to modify current server.
        We will later evaluate if they should be removed or if this new stream replaces them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranscribeAndSummarize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessMeeting(self, request_iterator, context):
        """New bidirectional streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeetingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveImportance': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveImportance,
                    request_deserializer=meeting__pb2.SaveImportanceRequest.FromString,
                    response_serializer=meeting__pb2.SaveImportanceResponse.SerializeToString,
            ),
            'TranscribeAndSummarize': grpc.unary_unary_rpc_method_handler(
                    servicer.TranscribeAndSummarize,
                    request_deserializer=meeting__pb2.TranscribeAndSummarizeRequest.FromString,
                    response_serializer=meeting__pb2.TranscribeAndSummarizeResponse.SerializeToString,
            ),
            'SaveMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveMetadata,
                    request_deserializer=meeting__pb2.SaveMetadataRequest.FromString,
                    response_serializer=meeting__pb2.SaveMetadataResponse.SerializeToString,
            ),
            'EditMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.EditMetadata,
                    request_deserializer=meeting__pb2.EditMetadataRequest.FromString,
                    response_serializer=meeting__pb2.EditMetadataResponse.SerializeToString,
            ),
            'DeleteMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMetadata,
                    request_deserializer=meeting__pb2.DeleteMetadataRequest.FromString,
                    response_serializer=meeting__pb2.DeleteMetadataResponse.SerializeToString,
            ),
            'ProcessMeeting': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessMeeting,
                    request_deserializer=meeting__pb2.MeetingStreamRequest.FromString,
                    response_serializer=meeting__pb2.MeetingStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meeting.MeetingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('meeting.MeetingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MeetingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SaveImportance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meeting.MeetingService/SaveImportance',
            meeting__pb2.SaveImportanceRequest.SerializeToString,
            meeting__pb2.SaveImportanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TranscribeAndSummarize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meeting.MeetingService/TranscribeAndSummarize',
            meeting__pb2.TranscribeAndSummarizeRequest.SerializeToString,
            meeting__pb2.TranscribeAndSummarizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meeting.MeetingService/SaveMetadata',
            meeting__pb2.SaveMetadataRequest.SerializeToString,
            meeting__pb2.SaveMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meeting.MeetingService/EditMetadata',
            meeting__pb2.EditMetadataRequest.SerializeToString,
            meeting__pb2.EditMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meeting.MeetingService/DeleteMetadata',
            meeting__pb2.DeleteMetadataRequest.SerializeToString,
            meeting__pb2.DeleteMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessMeeting(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/meeting.MeetingService/ProcessMeeting',
            meeting__pb2.MeetingStreamRequest.SerializeToString,
            meeting__pb2.MeetingStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
