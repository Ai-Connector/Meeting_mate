// source: meeting.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.meeting.AudioChunk', null, global);
goog.exportSymbol('proto.meeting.DeleteMetadataRequest', null, global);
goog.exportSymbol('proto.meeting.DeleteMetadataResponse', null, global);
goog.exportSymbol('proto.meeting.EditMetadataRequest', null, global);
goog.exportSymbol('proto.meeting.EditMetadataResponse', null, global);
goog.exportSymbol('proto.meeting.FinalTranscription', null, global);
goog.exportSymbol('proto.meeting.ImportanceMarker', null, global);
goog.exportSymbol('proto.meeting.ImportanceSavedAck', null, global);
goog.exportSymbol('proto.meeting.InitialSetup', null, global);
goog.exportSymbol('proto.meeting.MeetingInitialized', null, global);
goog.exportSymbol('proto.meeting.MeetingStreamRequest', null, global);
goog.exportSymbol('proto.meeting.MeetingStreamRequest.PayloadCase', null, global);
goog.exportSymbol('proto.meeting.MeetingStreamResponse', null, global);
goog.exportSymbol('proto.meeting.MeetingStreamResponse.PayloadCase', null, global);
goog.exportSymbol('proto.meeting.PartialTranscription', null, global);
goog.exportSymbol('proto.meeting.SaveImportanceRequest', null, global);
goog.exportSymbol('proto.meeting.SaveImportanceResponse', null, global);
goog.exportSymbol('proto.meeting.SaveMetadataRequest', null, global);
goog.exportSymbol('proto.meeting.SaveMetadataResponse', null, global);
goog.exportSymbol('proto.meeting.StreamError', null, global);
goog.exportSymbol('proto.meeting.SummaryResult', null, global);
goog.exportSymbol('proto.meeting.TranscribeAndSummarizeRequest', null, global);
goog.exportSymbol('proto.meeting.TranscribeAndSummarizeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.SaveImportanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.SaveImportanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.SaveImportanceRequest.displayName = 'proto.meeting.SaveImportanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.SaveImportanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.SaveImportanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.SaveImportanceResponse.displayName = 'proto.meeting.SaveImportanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.TranscribeAndSummarizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.TranscribeAndSummarizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.TranscribeAndSummarizeRequest.displayName = 'proto.meeting.TranscribeAndSummarizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.TranscribeAndSummarizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.TranscribeAndSummarizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.TranscribeAndSummarizeResponse.displayName = 'proto.meeting.TranscribeAndSummarizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.SaveMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meeting.SaveMetadataRequest.repeatedFields_, null);
};
goog.inherits(proto.meeting.SaveMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.SaveMetadataRequest.displayName = 'proto.meeting.SaveMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.SaveMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.SaveMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.SaveMetadataResponse.displayName = 'proto.meeting.SaveMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.EditMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meeting.EditMetadataRequest.repeatedFields_, null);
};
goog.inherits(proto.meeting.EditMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.EditMetadataRequest.displayName = 'proto.meeting.EditMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.EditMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.EditMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.EditMetadataResponse.displayName = 'proto.meeting.EditMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.DeleteMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.DeleteMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.DeleteMetadataRequest.displayName = 'proto.meeting.DeleteMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.DeleteMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.DeleteMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.DeleteMetadataResponse.displayName = 'proto.meeting.DeleteMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.MeetingStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meeting.MeetingStreamRequest.oneofGroups_);
};
goog.inherits(proto.meeting.MeetingStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.MeetingStreamRequest.displayName = 'proto.meeting.MeetingStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.InitialSetup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.InitialSetup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.InitialSetup.displayName = 'proto.meeting.InitialSetup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.AudioChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.AudioChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.AudioChunk.displayName = 'proto.meeting.AudioChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.ImportanceMarker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.ImportanceMarker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.ImportanceMarker.displayName = 'proto.meeting.ImportanceMarker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.MeetingStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meeting.MeetingStreamResponse.oneofGroups_);
};
goog.inherits(proto.meeting.MeetingStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.MeetingStreamResponse.displayName = 'proto.meeting.MeetingStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.MeetingInitialized = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.MeetingInitialized, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.MeetingInitialized.displayName = 'proto.meeting.MeetingInitialized';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.PartialTranscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.PartialTranscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.PartialTranscription.displayName = 'proto.meeting.PartialTranscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.FinalTranscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.FinalTranscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.FinalTranscription.displayName = 'proto.meeting.FinalTranscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.SummaryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.SummaryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.SummaryResult.displayName = 'proto.meeting.SummaryResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.ImportanceSavedAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.ImportanceSavedAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.ImportanceSavedAck.displayName = 'proto.meeting.ImportanceSavedAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meeting.StreamError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meeting.StreamError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meeting.StreamError.displayName = 'proto.meeting.StreamError';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.SaveImportanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.SaveImportanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.SaveImportanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveImportanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    importance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.SaveImportanceRequest}
 */
proto.meeting.SaveImportanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.SaveImportanceRequest;
  return proto.meeting.SaveImportanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.SaveImportanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.SaveImportanceRequest}
 */
proto.meeting.SaveImportanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImportance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.SaveImportanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.SaveImportanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.SaveImportanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveImportanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImportance();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string item_name = 1;
 * @return {string}
 */
proto.meeting.SaveImportanceRequest.prototype.getItemName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveImportanceRequest} returns this
 */
proto.meeting.SaveImportanceRequest.prototype.setItemName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 importance = 2;
 * @return {number}
 */
proto.meeting.SaveImportanceRequest.prototype.getImportance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.SaveImportanceRequest} returns this
 */
proto.meeting.SaveImportanceRequest.prototype.setImportance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.meeting.SaveImportanceRequest.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveImportanceRequest} returns this
 */
proto.meeting.SaveImportanceRequest.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.SaveImportanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.SaveImportanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.SaveImportanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveImportanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.SaveImportanceResponse}
 */
proto.meeting.SaveImportanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.SaveImportanceResponse;
  return proto.meeting.SaveImportanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.SaveImportanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.SaveImportanceResponse}
 */
proto.meeting.SaveImportanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.SaveImportanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.SaveImportanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.SaveImportanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveImportanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.meeting.SaveImportanceResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.SaveImportanceResponse} returns this
 */
proto.meeting.SaveImportanceResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.meeting.SaveImportanceResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveImportanceResponse} returns this
 */
proto.meeting.SaveImportanceResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.TranscribeAndSummarizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.TranscribeAndSummarizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.TranscribeAndSummarizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioData: msg.getAudioData_asB64(),
    audioFormat: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.TranscribeAndSummarizeRequest}
 */
proto.meeting.TranscribeAndSummarizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.TranscribeAndSummarizeRequest;
  return proto.meeting.TranscribeAndSummarizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.TranscribeAndSummarizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.TranscribeAndSummarizeRequest}
 */
proto.meeting.TranscribeAndSummarizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.TranscribeAndSummarizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.TranscribeAndSummarizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.TranscribeAndSummarizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAudioFormat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes audio_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_data = 1;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.meeting.TranscribeAndSummarizeRequest} returns this
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.setAudioData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string audio_format = 2;
 * @return {string}
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.getAudioFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.TranscribeAndSummarizeRequest} returns this
 */
proto.meeting.TranscribeAndSummarizeRequest.prototype.setAudioFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.TranscribeAndSummarizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.TranscribeAndSummarizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.TranscribeAndSummarizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.TranscribeAndSummarizeResponse}
 */
proto.meeting.TranscribeAndSummarizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.TranscribeAndSummarizeResponse;
  return proto.meeting.TranscribeAndSummarizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.TranscribeAndSummarizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.TranscribeAndSummarizeResponse}
 */
proto.meeting.TranscribeAndSummarizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.TranscribeAndSummarizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.TranscribeAndSummarizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.TranscribeAndSummarizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string transcription = 1;
 * @return {string}
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.getTranscription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.TranscribeAndSummarizeResponse} returns this
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.setTranscription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string summary = 2;
 * @return {string}
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.TranscribeAndSummarizeResponse} returns this
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string error_message = 3;
 * @return {string}
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.TranscribeAndSummarizeResponse} returns this
 */
proto.meeting.TranscribeAndSummarizeResponse.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meeting.SaveMetadataRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.SaveMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.SaveMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.SaveMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meetingDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attendeesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    additionalInfo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.SaveMetadataRequest}
 */
proto.meeting.SaveMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.SaveMetadataRequest;
  return proto.meeting.SaveMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.SaveMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.SaveMetadataRequest}
 */
proto.meeting.SaveMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttendees(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdditionalInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.SaveMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.SaveMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.SaveMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeetingDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttendeesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAdditionalInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.meeting.SaveMetadataRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string meeting_date = 2;
 * @return {string}
 */
proto.meeting.SaveMetadataRequest.prototype.getMeetingDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.setMeetingDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string attendees = 3;
 * @return {!Array<string>}
 */
proto.meeting.SaveMetadataRequest.prototype.getAttendeesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.setAttendeesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.addAttendees = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.clearAttendeesList = function() {
  return this.setAttendeesList([]);
};


/**
 * optional string additional_info = 4;
 * @return {string}
 */
proto.meeting.SaveMetadataRequest.prototype.getAdditionalInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveMetadataRequest} returns this
 */
proto.meeting.SaveMetadataRequest.prototype.setAdditionalInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.SaveMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.SaveMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.SaveMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.SaveMetadataResponse}
 */
proto.meeting.SaveMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.SaveMetadataResponse;
  return proto.meeting.SaveMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.SaveMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.SaveMetadataResponse}
 */
proto.meeting.SaveMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.SaveMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.SaveMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.SaveMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SaveMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeetingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string meeting_id = 1;
 * @return {string}
 */
proto.meeting.SaveMetadataResponse.prototype.getMeetingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveMetadataResponse} returns this
 */
proto.meeting.SaveMetadataResponse.prototype.setMeetingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.meeting.SaveMetadataResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.SaveMetadataResponse} returns this
 */
proto.meeting.SaveMetadataResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.meeting.SaveMetadataResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SaveMetadataResponse} returns this
 */
proto.meeting.SaveMetadataResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meeting.EditMetadataRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.EditMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.EditMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.EditMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.EditMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    meetingDate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    attendeesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    additionalInfo: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.EditMetadataRequest}
 */
proto.meeting.EditMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.EditMetadataRequest;
  return proto.meeting.EditMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.EditMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.EditMetadataRequest}
 */
proto.meeting.EditMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttendees(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdditionalInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.EditMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.EditMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.EditMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.EditMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeetingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAttendeesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string meeting_id = 1;
 * @return {string}
 */
proto.meeting.EditMetadataRequest.prototype.getMeetingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.setMeetingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.meeting.EditMetadataRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.EditMetadataRequest.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string meeting_date = 3;
 * @return {string}
 */
proto.meeting.EditMetadataRequest.prototype.getMeetingDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.setMeetingDate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.clearMeetingDate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.EditMetadataRequest.prototype.hasMeetingDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string attendees = 4;
 * @return {!Array<string>}
 */
proto.meeting.EditMetadataRequest.prototype.getAttendeesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.setAttendeesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.addAttendees = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.clearAttendeesList = function() {
  return this.setAttendeesList([]);
};


/**
 * optional string additional_info = 5;
 * @return {string}
 */
proto.meeting.EditMetadataRequest.prototype.getAdditionalInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.setAdditionalInfo = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meeting.EditMetadataRequest} returns this
 */
proto.meeting.EditMetadataRequest.prototype.clearAdditionalInfo = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.EditMetadataRequest.prototype.hasAdditionalInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.EditMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.EditMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.EditMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.EditMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.EditMetadataResponse}
 */
proto.meeting.EditMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.EditMetadataResponse;
  return proto.meeting.EditMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.EditMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.EditMetadataResponse}
 */
proto.meeting.EditMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.EditMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.EditMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.EditMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.EditMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.meeting.EditMetadataResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.EditMetadataResponse} returns this
 */
proto.meeting.EditMetadataResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.meeting.EditMetadataResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.EditMetadataResponse} returns this
 */
proto.meeting.EditMetadataResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.DeleteMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.DeleteMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.DeleteMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.DeleteMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.DeleteMetadataRequest}
 */
proto.meeting.DeleteMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.DeleteMetadataRequest;
  return proto.meeting.DeleteMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.DeleteMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.DeleteMetadataRequest}
 */
proto.meeting.DeleteMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.DeleteMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.DeleteMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.DeleteMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.DeleteMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeetingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string meeting_id = 1;
 * @return {string}
 */
proto.meeting.DeleteMetadataRequest.prototype.getMeetingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.DeleteMetadataRequest} returns this
 */
proto.meeting.DeleteMetadataRequest.prototype.setMeetingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.DeleteMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.DeleteMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.DeleteMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.DeleteMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.DeleteMetadataResponse}
 */
proto.meeting.DeleteMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.DeleteMetadataResponse;
  return proto.meeting.DeleteMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.DeleteMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.DeleteMetadataResponse}
 */
proto.meeting.DeleteMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.DeleteMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.DeleteMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.DeleteMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.DeleteMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.meeting.DeleteMetadataResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.DeleteMetadataResponse} returns this
 */
proto.meeting.DeleteMetadataResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.meeting.DeleteMetadataResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.DeleteMetadataResponse} returns this
 */
proto.meeting.DeleteMetadataResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meeting.MeetingStreamRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.meeting.MeetingStreamRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INITIAL_SETUP: 1,
  AUDIO_CHUNK: 2,
  IMPORTANCE_MARKER: 3
};

/**
 * @return {proto.meeting.MeetingStreamRequest.PayloadCase}
 */
proto.meeting.MeetingStreamRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.meeting.MeetingStreamRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.meeting.MeetingStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.MeetingStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.MeetingStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.MeetingStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialSetup: (f = msg.getInitialSetup()) && proto.meeting.InitialSetup.toObject(includeInstance, f),
    audioChunk: (f = msg.getAudioChunk()) && proto.meeting.AudioChunk.toObject(includeInstance, f),
    importanceMarker: (f = msg.getImportanceMarker()) && proto.meeting.ImportanceMarker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.MeetingStreamRequest}
 */
proto.meeting.MeetingStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.MeetingStreamRequest;
  return proto.meeting.MeetingStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.MeetingStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.MeetingStreamRequest}
 */
proto.meeting.MeetingStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meeting.InitialSetup;
      reader.readMessage(value,proto.meeting.InitialSetup.deserializeBinaryFromReader);
      msg.setInitialSetup(value);
      break;
    case 2:
      var value = new proto.meeting.AudioChunk;
      reader.readMessage(value,proto.meeting.AudioChunk.deserializeBinaryFromReader);
      msg.setAudioChunk(value);
      break;
    case 3:
      var value = new proto.meeting.ImportanceMarker;
      reader.readMessage(value,proto.meeting.ImportanceMarker.deserializeBinaryFromReader);
      msg.setImportanceMarker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.MeetingStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.MeetingStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.MeetingStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meeting.InitialSetup.serializeBinaryToWriter
    );
  }
  f = message.getAudioChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.meeting.AudioChunk.serializeBinaryToWriter
    );
  }
  f = message.getImportanceMarker();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meeting.ImportanceMarker.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitialSetup initial_setup = 1;
 * @return {?proto.meeting.InitialSetup}
 */
proto.meeting.MeetingStreamRequest.prototype.getInitialSetup = function() {
  return /** @type{?proto.meeting.InitialSetup} */ (
    jspb.Message.getWrapperField(this, proto.meeting.InitialSetup, 1));
};


/**
 * @param {?proto.meeting.InitialSetup|undefined} value
 * @return {!proto.meeting.MeetingStreamRequest} returns this
*/
proto.meeting.MeetingStreamRequest.prototype.setInitialSetup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.meeting.MeetingStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamRequest} returns this
 */
proto.meeting.MeetingStreamRequest.prototype.clearInitialSetup = function() {
  return this.setInitialSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamRequest.prototype.hasInitialSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioChunk audio_chunk = 2;
 * @return {?proto.meeting.AudioChunk}
 */
proto.meeting.MeetingStreamRequest.prototype.getAudioChunk = function() {
  return /** @type{?proto.meeting.AudioChunk} */ (
    jspb.Message.getWrapperField(this, proto.meeting.AudioChunk, 2));
};


/**
 * @param {?proto.meeting.AudioChunk|undefined} value
 * @return {!proto.meeting.MeetingStreamRequest} returns this
*/
proto.meeting.MeetingStreamRequest.prototype.setAudioChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.meeting.MeetingStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamRequest} returns this
 */
proto.meeting.MeetingStreamRequest.prototype.clearAudioChunk = function() {
  return this.setAudioChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamRequest.prototype.hasAudioChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImportanceMarker importance_marker = 3;
 * @return {?proto.meeting.ImportanceMarker}
 */
proto.meeting.MeetingStreamRequest.prototype.getImportanceMarker = function() {
  return /** @type{?proto.meeting.ImportanceMarker} */ (
    jspb.Message.getWrapperField(this, proto.meeting.ImportanceMarker, 3));
};


/**
 * @param {?proto.meeting.ImportanceMarker|undefined} value
 * @return {!proto.meeting.MeetingStreamRequest} returns this
*/
proto.meeting.MeetingStreamRequest.prototype.setImportanceMarker = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.meeting.MeetingStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamRequest} returns this
 */
proto.meeting.MeetingStreamRequest.prototype.clearImportanceMarker = function() {
  return this.setImportanceMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamRequest.prototype.hasImportanceMarker = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.InitialSetup.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.InitialSetup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.InitialSetup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.InitialSetup.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audioFormat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: (f = msg.getMetadata()) && proto.meeting.SaveMetadataRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.InitialSetup}
 */
proto.meeting.InitialSetup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.InitialSetup;
  return proto.meeting.InitialSetup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.InitialSetup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.InitialSetup}
 */
proto.meeting.InitialSetup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioFormat(value);
      break;
    case 3:
      var value = new proto.meeting.SaveMetadataRequest;
      reader.readMessage(value,proto.meeting.SaveMetadataRequest.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.InitialSetup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.InitialSetup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.InitialSetup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.InitialSetup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeetingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudioFormat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meeting.SaveMetadataRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string meeting_id = 1;
 * @return {string}
 */
proto.meeting.InitialSetup.prototype.getMeetingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.InitialSetup} returns this
 */
proto.meeting.InitialSetup.prototype.setMeetingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string audio_format = 2;
 * @return {string}
 */
proto.meeting.InitialSetup.prototype.getAudioFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.InitialSetup} returns this
 */
proto.meeting.InitialSetup.prototype.setAudioFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SaveMetadataRequest metadata = 3;
 * @return {?proto.meeting.SaveMetadataRequest}
 */
proto.meeting.InitialSetup.prototype.getMetadata = function() {
  return /** @type{?proto.meeting.SaveMetadataRequest} */ (
    jspb.Message.getWrapperField(this, proto.meeting.SaveMetadataRequest, 3));
};


/**
 * @param {?proto.meeting.SaveMetadataRequest|undefined} value
 * @return {!proto.meeting.InitialSetup} returns this
*/
proto.meeting.InitialSetup.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.InitialSetup} returns this
 */
proto.meeting.InitialSetup.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.InitialSetup.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.AudioChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.AudioChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.AudioChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.AudioChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.AudioChunk}
 */
proto.meeting.AudioChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.AudioChunk;
  return proto.meeting.AudioChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.AudioChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.AudioChunk}
 */
proto.meeting.AudioChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.AudioChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.AudioChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.AudioChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.AudioChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meeting.AudioChunk.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.meeting.AudioChunk.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.meeting.AudioChunk.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.meeting.AudioChunk} returns this
 */
proto.meeting.AudioChunk.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 sequence_number = 2;
 * @return {number}
 */
proto.meeting.AudioChunk.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.AudioChunk} returns this
 */
proto.meeting.AudioChunk.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.ImportanceMarker.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.ImportanceMarker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.ImportanceMarker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.ImportanceMarker.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    importanceScore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    details: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.ImportanceMarker}
 */
proto.meeting.ImportanceMarker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.ImportanceMarker;
  return proto.meeting.ImportanceMarker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.ImportanceMarker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.ImportanceMarker}
 */
proto.meeting.ImportanceMarker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImportanceScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.ImportanceMarker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.ImportanceMarker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.ImportanceMarker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.ImportanceMarker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImportanceScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string item_name = 1;
 * @return {string}
 */
proto.meeting.ImportanceMarker.prototype.getItemName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.ImportanceMarker} returns this
 */
proto.meeting.ImportanceMarker.prototype.setItemName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 importance_score = 2;
 * @return {number}
 */
proto.meeting.ImportanceMarker.prototype.getImportanceScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.ImportanceMarker} returns this
 */
proto.meeting.ImportanceMarker.prototype.setImportanceScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.meeting.ImportanceMarker.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.ImportanceMarker} returns this
 */
proto.meeting.ImportanceMarker.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp_ms = 4;
 * @return {number}
 */
proto.meeting.ImportanceMarker.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.ImportanceMarker} returns this
 */
proto.meeting.ImportanceMarker.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meeting.MeetingStreamResponse.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.meeting.MeetingStreamResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CONFIRMATION: 1,
  PARTIAL_TRANSCRIPTION: 2,
  FINAL_TRANSCRIPTION: 3,
  SUMMARY_RESULT: 4,
  IMPORTANCE_ACK: 5,
  ERROR: 6
};

/**
 * @return {proto.meeting.MeetingStreamResponse.PayloadCase}
 */
proto.meeting.MeetingStreamResponse.prototype.getPayloadCase = function() {
  return /** @type {proto.meeting.MeetingStreamResponse.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.meeting.MeetingStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.MeetingStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.MeetingStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.MeetingStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmation: (f = msg.getConfirmation()) && proto.meeting.MeetingInitialized.toObject(includeInstance, f),
    partialTranscription: (f = msg.getPartialTranscription()) && proto.meeting.PartialTranscription.toObject(includeInstance, f),
    finalTranscription: (f = msg.getFinalTranscription()) && proto.meeting.FinalTranscription.toObject(includeInstance, f),
    summaryResult: (f = msg.getSummaryResult()) && proto.meeting.SummaryResult.toObject(includeInstance, f),
    importanceAck: (f = msg.getImportanceAck()) && proto.meeting.ImportanceSavedAck.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.meeting.StreamError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.MeetingStreamResponse}
 */
proto.meeting.MeetingStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.MeetingStreamResponse;
  return proto.meeting.MeetingStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.MeetingStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.MeetingStreamResponse}
 */
proto.meeting.MeetingStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meeting.MeetingInitialized;
      reader.readMessage(value,proto.meeting.MeetingInitialized.deserializeBinaryFromReader);
      msg.setConfirmation(value);
      break;
    case 2:
      var value = new proto.meeting.PartialTranscription;
      reader.readMessage(value,proto.meeting.PartialTranscription.deserializeBinaryFromReader);
      msg.setPartialTranscription(value);
      break;
    case 3:
      var value = new proto.meeting.FinalTranscription;
      reader.readMessage(value,proto.meeting.FinalTranscription.deserializeBinaryFromReader);
      msg.setFinalTranscription(value);
      break;
    case 4:
      var value = new proto.meeting.SummaryResult;
      reader.readMessage(value,proto.meeting.SummaryResult.deserializeBinaryFromReader);
      msg.setSummaryResult(value);
      break;
    case 5:
      var value = new proto.meeting.ImportanceSavedAck;
      reader.readMessage(value,proto.meeting.ImportanceSavedAck.deserializeBinaryFromReader);
      msg.setImportanceAck(value);
      break;
    case 6:
      var value = new proto.meeting.StreamError;
      reader.readMessage(value,proto.meeting.StreamError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.MeetingStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.MeetingStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.MeetingStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meeting.MeetingInitialized.serializeBinaryToWriter
    );
  }
  f = message.getPartialTranscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.meeting.PartialTranscription.serializeBinaryToWriter
    );
  }
  f = message.getFinalTranscription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meeting.FinalTranscription.serializeBinaryToWriter
    );
  }
  f = message.getSummaryResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.meeting.SummaryResult.serializeBinaryToWriter
    );
  }
  f = message.getImportanceAck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.meeting.ImportanceSavedAck.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.meeting.StreamError.serializeBinaryToWriter
    );
  }
};


/**
 * optional MeetingInitialized confirmation = 1;
 * @return {?proto.meeting.MeetingInitialized}
 */
proto.meeting.MeetingStreamResponse.prototype.getConfirmation = function() {
  return /** @type{?proto.meeting.MeetingInitialized} */ (
    jspb.Message.getWrapperField(this, proto.meeting.MeetingInitialized, 1));
};


/**
 * @param {?proto.meeting.MeetingInitialized|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setConfirmation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearConfirmation = function() {
  return this.setConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasConfirmation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PartialTranscription partial_transcription = 2;
 * @return {?proto.meeting.PartialTranscription}
 */
proto.meeting.MeetingStreamResponse.prototype.getPartialTranscription = function() {
  return /** @type{?proto.meeting.PartialTranscription} */ (
    jspb.Message.getWrapperField(this, proto.meeting.PartialTranscription, 2));
};


/**
 * @param {?proto.meeting.PartialTranscription|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setPartialTranscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearPartialTranscription = function() {
  return this.setPartialTranscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasPartialTranscription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FinalTranscription final_transcription = 3;
 * @return {?proto.meeting.FinalTranscription}
 */
proto.meeting.MeetingStreamResponse.prototype.getFinalTranscription = function() {
  return /** @type{?proto.meeting.FinalTranscription} */ (
    jspb.Message.getWrapperField(this, proto.meeting.FinalTranscription, 3));
};


/**
 * @param {?proto.meeting.FinalTranscription|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setFinalTranscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearFinalTranscription = function() {
  return this.setFinalTranscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasFinalTranscription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SummaryResult summary_result = 4;
 * @return {?proto.meeting.SummaryResult}
 */
proto.meeting.MeetingStreamResponse.prototype.getSummaryResult = function() {
  return /** @type{?proto.meeting.SummaryResult} */ (
    jspb.Message.getWrapperField(this, proto.meeting.SummaryResult, 4));
};


/**
 * @param {?proto.meeting.SummaryResult|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setSummaryResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearSummaryResult = function() {
  return this.setSummaryResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasSummaryResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ImportanceSavedAck importance_ack = 5;
 * @return {?proto.meeting.ImportanceSavedAck}
 */
proto.meeting.MeetingStreamResponse.prototype.getImportanceAck = function() {
  return /** @type{?proto.meeting.ImportanceSavedAck} */ (
    jspb.Message.getWrapperField(this, proto.meeting.ImportanceSavedAck, 5));
};


/**
 * @param {?proto.meeting.ImportanceSavedAck|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setImportanceAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearImportanceAck = function() {
  return this.setImportanceAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasImportanceAck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StreamError error = 6;
 * @return {?proto.meeting.StreamError}
 */
proto.meeting.MeetingStreamResponse.prototype.getError = function() {
  return /** @type{?proto.meeting.StreamError} */ (
    jspb.Message.getWrapperField(this, proto.meeting.StreamError, 6));
};


/**
 * @param {?proto.meeting.StreamError|undefined} value
 * @return {!proto.meeting.MeetingStreamResponse} returns this
*/
proto.meeting.MeetingStreamResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.meeting.MeetingStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.meeting.MeetingStreamResponse} returns this
 */
proto.meeting.MeetingStreamResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meeting.MeetingStreamResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.MeetingInitialized.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.MeetingInitialized.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.MeetingInitialized} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingInitialized.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.MeetingInitialized}
 */
proto.meeting.MeetingInitialized.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.MeetingInitialized;
  return proto.meeting.MeetingInitialized.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.MeetingInitialized} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.MeetingInitialized}
 */
proto.meeting.MeetingInitialized.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.MeetingInitialized.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.MeetingInitialized.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.MeetingInitialized} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.MeetingInitialized.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeetingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string meeting_id = 1;
 * @return {string}
 */
proto.meeting.MeetingInitialized.prototype.getMeetingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.MeetingInitialized} returns this
 */
proto.meeting.MeetingInitialized.prototype.setMeetingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.meeting.MeetingInitialized.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.MeetingInitialized} returns this
 */
proto.meeting.MeetingInitialized.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.meeting.MeetingInitialized.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.MeetingInitialized} returns this
 */
proto.meeting.MeetingInitialized.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.PartialTranscription.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.PartialTranscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.PartialTranscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.PartialTranscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcriptSegment: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isInterim: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.PartialTranscription}
 */
proto.meeting.PartialTranscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.PartialTranscription;
  return proto.meeting.PartialTranscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.PartialTranscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.PartialTranscription}
 */
proto.meeting.PartialTranscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptSegment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInterim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.PartialTranscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.PartialTranscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.PartialTranscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.PartialTranscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscriptSegment();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIsInterim();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string transcript_segment = 1;
 * @return {string}
 */
proto.meeting.PartialTranscription.prototype.getTranscriptSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.PartialTranscription} returns this
 */
proto.meeting.PartialTranscription.prototype.setTranscriptSegment = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 sequence_number = 2;
 * @return {number}
 */
proto.meeting.PartialTranscription.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.PartialTranscription} returns this
 */
proto.meeting.PartialTranscription.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_interim = 3;
 * @return {boolean}
 */
proto.meeting.PartialTranscription.prototype.getIsInterim = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.PartialTranscription} returns this
 */
proto.meeting.PartialTranscription.prototype.setIsInterim = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.FinalTranscription.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.FinalTranscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.FinalTranscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.FinalTranscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullTranscript: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.FinalTranscription}
 */
proto.meeting.FinalTranscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.FinalTranscription;
  return proto.meeting.FinalTranscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.FinalTranscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.FinalTranscription}
 */
proto.meeting.FinalTranscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullTranscript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.FinalTranscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.FinalTranscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.FinalTranscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.FinalTranscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string full_transcript = 1;
 * @return {string}
 */
proto.meeting.FinalTranscription.prototype.getFullTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.FinalTranscription} returns this
 */
proto.meeting.FinalTranscription.prototype.setFullTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.SummaryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.SummaryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.SummaryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SummaryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    summaryText: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.SummaryResult}
 */
proto.meeting.SummaryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.SummaryResult;
  return proto.meeting.SummaryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.SummaryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.SummaryResult}
 */
proto.meeting.SummaryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummaryText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.SummaryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.SummaryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.SummaryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.SummaryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSummaryText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string summary_text = 1;
 * @return {string}
 */
proto.meeting.SummaryResult.prototype.getSummaryText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.SummaryResult} returns this
 */
proto.meeting.SummaryResult.prototype.setSummaryText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.ImportanceSavedAck.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.ImportanceSavedAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.ImportanceSavedAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.ImportanceSavedAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.ImportanceSavedAck}
 */
proto.meeting.ImportanceSavedAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.ImportanceSavedAck;
  return proto.meeting.ImportanceSavedAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.ImportanceSavedAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.ImportanceSavedAck}
 */
proto.meeting.ImportanceSavedAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.ImportanceSavedAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.ImportanceSavedAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.ImportanceSavedAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.ImportanceSavedAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string item_name = 1;
 * @return {string}
 */
proto.meeting.ImportanceSavedAck.prototype.getItemName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.ImportanceSavedAck} returns this
 */
proto.meeting.ImportanceSavedAck.prototype.setItemName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.meeting.ImportanceSavedAck.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.meeting.ImportanceSavedAck} returns this
 */
proto.meeting.ImportanceSavedAck.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.meeting.ImportanceSavedAck.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.ImportanceSavedAck} returns this
 */
proto.meeting.ImportanceSavedAck.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meeting.StreamError.prototype.toObject = function(opt_includeInstance) {
  return proto.meeting.StreamError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meeting.StreamError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.StreamError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meeting.StreamError}
 */
proto.meeting.StreamError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meeting.StreamError;
  return proto.meeting.StreamError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meeting.StreamError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meeting.StreamError}
 */
proto.meeting.StreamError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meeting.StreamError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meeting.StreamError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meeting.StreamError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meeting.StreamError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.meeting.StreamError.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.meeting.StreamError} returns this
 */
proto.meeting.StreamError.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.meeting.StreamError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meeting.StreamError} returns this
 */
proto.meeting.StreamError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.meeting);
